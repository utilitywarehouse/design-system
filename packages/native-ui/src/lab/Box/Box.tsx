/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable @typescript-eslint/no-unsafe-return */
import React, { memo, useMemo } from 'react';
import { View } from 'react-native';
import { createStyleSheet, useStyles } from 'react-native-unistyles';
import type BoxProps from './Box.props';

const getValue = (value: any, type: Record<string, any>) =>
  typeof value === 'string' && value[0] === '$' ? type[value.slice(1)] : value;

const Box: React.FC<BoxProps> = ({
  alignContent,
  alignItems,
  alignSelf,
  aspectRatio,
  borderBottomWidth,
  borderEndWidth,
  borderLeftWidth,
  borderRightWidth,
  borderStartWidth,
  borderTopWidth,
  borderWidth,
  bottom,
  display,
  end,
  flex,
  flexBasis,
  flexDirection,
  rowGap,
  gap,
  columnGap,
  flexGrow,
  flexShrink,
  flexWrap,
  height,
  justifyContent,
  left,
  margin,
  marginBottom,
  marginEnd,
  marginHorizontal,
  marginLeft,
  marginRight,
  marginStart,
  marginTop,
  marginVertical,
  maxHeight,
  maxWidth,
  minHeight,
  minWidth,
  overflow,
  padding,
  paddingBottom,
  paddingEnd,
  paddingHorizontal,
  paddingLeft,
  paddingRight,
  paddingStart,
  paddingTop,
  paddingVertical,
  position,
  right,
  start,
  top,
  width,
  zIndex,
  direction,
  backfaceVisibility,
  backgroundColor,
  borderBlockColor,
  borderBlockEndColor,
  borderBlockStartColor,
  borderBottomColor,
  borderBottomEndRadius,
  borderBottomLeftRadius,
  borderBottomRightRadius,
  borderBottomStartRadius,
  borderColor,
  borderCurve,
  borderEndColor,
  borderEndEndRadius,
  borderEndStartRadius,
  borderLeftColor,
  borderRadius,
  borderRightColor,
  borderStartColor,
  borderStartEndRadius,
  borderStartStartRadius,
  borderStyle,
  borderTopColor,
  borderTopEndRadius,
  borderTopLeftRadius,
  borderTopRightRadius,
  borderTopStartRadius,
  opacity,
  elevation,
  pointerEvents,
  cursor,
  shadowColor,
  shadowOffset,
  shadowOpacity,
  shadowRadius,
  transform,
  transformOrigin,
  bg,
  bgColor,
  h,
  w,
  p,
  px,
  py,
  pt,
  pb,
  pr,
  pl,
  m,
  mx,
  my,
  mt,
  mb,
  mr,
  ml,
  rounded,
  style,
  ...props
}) => {
  const {
    styles,
    theme: { space, colors, radii, borderWidths, opacity: themeOpacity },
  } = useStyles(stylesheet);

  const spaceValues = useMemo(
    () => ({
      padding: getValue(padding || p, space),
      paddingHorizontal: getValue(paddingHorizontal || px, space),
      paddingVertical: getValue(paddingVertical || py, space),
      paddingTop: getValue(paddingTop || pt, space),
      paddingBottom: getValue(paddingBottom || pb, space),
      paddingLeft: getValue(paddingLeft || pl, space),
      paddingRight: getValue(paddingRight || pr, space),
      paddingEnd: getValue(paddingEnd, space),
      paddingStart: getValue(paddingStart, space),
      margin: getValue(m || margin, space),
      marginHorizontal: getValue(marginHorizontal || mx, space),
      marginVertical: getValue(marginVertical || my, space),
      marginTop: getValue(marginTop || mt, space),
      marginBottom: getValue(marginBottom || mb, space),
      marginLeft: getValue(marginLeft || ml, space),
      marginRight: getValue(marginRight || mr, space),
      marginEnd: getValue(marginEnd, space),
      marginStart: getValue(marginStart, space),
      columnGap: getValue(columnGap, space),
      gap: getValue(gap, space),
      rowGap: getValue(rowGap, space),
    }),
    [
      padding,
      p,
      paddingHorizontal,
      px,
      paddingVertical,
      py,
      paddingTop,
      pt,
      paddingBottom,
      pb,
      paddingLeft,
      pl,
      paddingRight,
      pr,
      paddingEnd,
      paddingStart,
      margin,
      m,
      marginHorizontal,
      mx,
      marginVertical,
      my,
      marginTop,
      mt,
      marginBottom,
      mb,
      marginLeft,
      ml,
      marginRight,
      mr,
      gap,
      rowGap,
      columnGap,
      marginEnd,
      marginStart,
    ]
  );

  const colorValues = useMemo(
    () => ({
      backgroundColor: getValue(backgroundColor || bg || bgColor, colors),
      borderColor: getValue(borderColor, colors),
      borderBottomColor: getValue(borderBottomColor, colors),
      borderLeftColor: getValue(borderLeftColor, colors),
      borderRightColor: getValue(borderRightColor, colors),
      borderTopColor: getValue(borderTopColor, colors),
      borderBlockColor: getValue(borderBlockColor, colors),
      borderBlockEndColor: getValue(borderBlockEndColor, colors),
      borderBlockStartColor: getValue(borderBlockStartColor, colors),
      borderEndColor: getValue(borderEndColor, colors),
      borderStartColor: getValue(borderStartColor, colors),
      shadowColor: getValue(shadowColor, colors),
    }),
    [
      backgroundColor,
      bg,
      bgColor,
      borderColor,
      borderBottomColor,
      borderLeftColor,
      borderRightColor,
      borderTopColor,
      borderBlockColor,
      borderBlockEndColor,
      borderBlockStartColor,
      borderEndColor,
      borderStartColor,
      shadowColor,
    ]
  );

  const radiusValues = useMemo(
    () => ({
      borderRadius: getValue(borderRadius || rounded, radii),
      borderBottomEndRadius: getValue(borderBottomEndRadius, radii),
      borderBottomLeftRadius: getValue(borderBottomLeftRadius, radii),
      borderBottomRightRadius: getValue(borderBottomRightRadius, radii),
      borderBottomStartRadius: getValue(borderBottomStartRadius, radii),
      borderTopEndRadius: getValue(borderTopEndRadius, radii),
      borderTopLeftRadius: getValue(borderTopLeftRadius, radii),
      borderTopRightRadius: getValue(borderTopRightRadius, radii),
      borderTopStartRadius: getValue(borderTopStartRadius, radii),
      borderEndEndRadius: getValue(borderEndEndRadius, radii),
      borderEndStartRadius: getValue(borderEndStartRadius, radii),
      borderStartEndRadius: getValue(borderStartEndRadius, radii),
      borderStartStartRadius: getValue(borderStartStartRadius, radii),
    }),
    [
      borderRadius,
      rounded,
      borderBottomEndRadius,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      borderBottomStartRadius,
      borderTopEndRadius,
      borderTopLeftRadius,
      borderTopRightRadius,
      borderTopStartRadius,
      borderEndEndRadius,
      borderEndStartRadius,
      borderStartEndRadius,
      borderStartStartRadius,
    ]
  );

  const borderValues = useMemo(
    () => ({
      borderBottomWidth: getValue(borderBottomWidth, borderWidths),
      borderEndWidth: getValue(borderEndWidth, borderWidths),
      borderLeftWidth: getValue(borderLeftWidth, borderWidths),
      borderRightWidth: getValue(borderRightWidth, borderWidths),
      borderStartWidth: getValue(borderStartWidth, borderWidths),
      borderTopWidth: getValue(borderTopWidth, borderWidths),
      borderWidth: getValue(borderWidth, borderWidths),
    }),
    [
      borderBottomWidth,
      borderEndWidth,
      borderLeftWidth,
      borderRightWidth,
      borderStartWidth,
      borderTopWidth,
      borderWidth,
    ]
  );

  const opacityValue = useMemo(() => getValue(opacity, themeOpacity), [opacity]);

  const boxStyles = useMemo(
    () =>
      styles.box({
        alignContent,
        alignItems,
        alignSelf,
        aspectRatio,
        bottom,
        display,
        end,
        flex,
        flexBasis,
        flexDirection,
        flexGrow,
        flexShrink,
        flexWrap,
        height: height || h,
        justifyContent,
        left,
        maxHeight,
        maxWidth,
        minHeight,
        minWidth,
        overflow,
        position,
        right,
        start,
        top,
        width: width || w,
        zIndex,
        direction,
        backfaceVisibility,
        borderCurve,
        borderStyle,
        elevation,
        pointerEvents,
        cursor,
        shadowOffset,
        shadowOpacity,
        shadowRadius,
        transform,
        transformOrigin,
        ...borderValues,
        ...colorValues,
        ...radiusValues,
        ...spaceValues,
        opacity: opacityValue,
      }),
    [
      alignContent,
      alignItems,
      alignSelf,
      aspectRatio,
      borderBottomWidth,
      borderEndWidth,
      borderLeftWidth,
      borderRightWidth,
      borderStartWidth,
      borderTopWidth,
      borderWidth,
      bottom,
      display,
      end,
      flex,
      flexBasis,
      flexDirection,
      rowGap,
      gap,
      columnGap,
      flexGrow,
      flexShrink,
      flexWrap,
      height,
      h,
      justifyContent,
      left,
      spaceValues.margin,
      spaceValues.marginBottom,
      marginEnd,
      marginHorizontal,
      mx,
      marginLeft,
      ml,
      marginRight,
      mr,
      marginStart,
      marginTop,
      mt,
      marginVertical,
      my,
      maxHeight,
      maxWidth,
      minHeight,
      minWidth,
      overflow,
      spaceValues.padding,
      paddingBottom,
      paddingEnd,
      paddingHorizontal,
      px,
      paddingLeft,
      pl,
      paddingRight,
      pr,
      paddingStart,
      paddingTop,
      pt,
      paddingVertical,
      py,
      position,
      right,
      start,
      top,
      width,
      w,
      zIndex,
      direction,
      backfaceVisibility,
      backgroundColor,
      bg,
      bgColor,
      borderBlockColor,
      borderBlockEndColor,
      borderBlockStartColor,
      borderBottomColor,
      borderBottomEndRadius,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      borderBottomStartRadius,
      borderColor,
      borderCurve,
      borderEndColor,
      borderEndEndRadius,
      borderEndStartRadius,
      borderLeftColor,
      borderRadius,
      rounded,
      borderRightColor,
      borderStartColor,
      borderStartEndRadius,
      borderStartStartRadius,
      borderStyle,
      borderTopColor,
      borderTopEndRadius,
      borderTopLeftRadius,
      borderTopRightRadius,
      borderTopStartRadius,
      opacity,
      elevation,
      pointerEvents,
      cursor,
      shadowColor,
      shadowOffset,
      shadowOpacity,
      shadowRadius,
      transform,
      transformOrigin,
    ]
  );

  return <View {...props} style={[styles.box(boxStyles), style]} />;
};

const stylesheet = createStyleSheet(() => ({
  box: styles => ({ ...styles }),
}));

export default memo(Box);
